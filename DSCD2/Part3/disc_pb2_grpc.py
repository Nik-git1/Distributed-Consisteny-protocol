# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import disc_pb2 as disc__pb2


class RegisterReplicaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.replicaRegister = channel.unary_unary(
                '/disc.RegisterReplicaService/replicaRegister',
                request_serializer=disc__pb2.Server.SerializeToString,
                response_deserializer=disc__pb2.Server.FromString,
                )
        self.getReplicaList = channel.unary_unary(
                '/disc.RegisterReplicaService/getReplicaList',
                request_serializer=disc__pb2.void.SerializeToString,
                response_deserializer=disc__pb2.Server_list.FromString,
                )
        self.registryList = channel.unary_unary(
                '/disc.RegisterReplicaService/registryList',
                request_serializer=disc__pb2.list_request.SerializeToString,
                response_deserializer=disc__pb2.Server_list.FromString,
                )
        self.writeRequest = channel.unary_unary(
                '/disc.RegisterReplicaService/writeRequest',
                request_serializer=disc__pb2.write.SerializeToString,
                response_deserializer=disc__pb2.writeResponse.FromString,
                )
        self.updatePrimary = channel.unary_unary(
                '/disc.RegisterReplicaService/updatePrimary',
                request_serializer=disc__pb2.Server_list.SerializeToString,
                response_deserializer=disc__pb2.void.FromString,
                )
        self.readFile = channel.unary_unary(
                '/disc.RegisterReplicaService/readFile',
                request_serializer=disc__pb2.uuidData.SerializeToString,
                response_deserializer=disc__pb2.file.FromString,
                )
        self.deleteRequest = channel.unary_unary(
                '/disc.RegisterReplicaService/deleteRequest',
                request_serializer=disc__pb2.uuidData.SerializeToString,
                response_deserializer=disc__pb2.result.FromString,
                )


class RegisterReplicaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def replicaRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getReplicaList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registryList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def writeRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatePrimary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisterReplicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'replicaRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.replicaRegister,
                    request_deserializer=disc__pb2.Server.FromString,
                    response_serializer=disc__pb2.Server.SerializeToString,
            ),
            'getReplicaList': grpc.unary_unary_rpc_method_handler(
                    servicer.getReplicaList,
                    request_deserializer=disc__pb2.void.FromString,
                    response_serializer=disc__pb2.Server_list.SerializeToString,
            ),
            'registryList': grpc.unary_unary_rpc_method_handler(
                    servicer.registryList,
                    request_deserializer=disc__pb2.list_request.FromString,
                    response_serializer=disc__pb2.Server_list.SerializeToString,
            ),
            'writeRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.writeRequest,
                    request_deserializer=disc__pb2.write.FromString,
                    response_serializer=disc__pb2.writeResponse.SerializeToString,
            ),
            'updatePrimary': grpc.unary_unary_rpc_method_handler(
                    servicer.updatePrimary,
                    request_deserializer=disc__pb2.Server_list.FromString,
                    response_serializer=disc__pb2.void.SerializeToString,
            ),
            'readFile': grpc.unary_unary_rpc_method_handler(
                    servicer.readFile,
                    request_deserializer=disc__pb2.uuidData.FromString,
                    response_serializer=disc__pb2.file.SerializeToString,
            ),
            'deleteRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteRequest,
                    request_deserializer=disc__pb2.uuidData.FromString,
                    response_serializer=disc__pb2.result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disc.RegisterReplicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisterReplicaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def replicaRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/replicaRegister',
            disc__pb2.Server.SerializeToString,
            disc__pb2.Server.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getReplicaList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/getReplicaList',
            disc__pb2.void.SerializeToString,
            disc__pb2.Server_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/registryList',
            disc__pb2.list_request.SerializeToString,
            disc__pb2.Server_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def writeRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/writeRequest',
            disc__pb2.write.SerializeToString,
            disc__pb2.writeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updatePrimary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/updatePrimary',
            disc__pb2.Server_list.SerializeToString,
            disc__pb2.void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/readFile',
            disc__pb2.uuidData.SerializeToString,
            disc__pb2.file.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/disc.RegisterReplicaService/deleteRequest',
            disc__pb2.uuidData.SerializeToString,
            disc__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
